summary(log_1)
# Building 1st default model with all predictors
log_1 <- glm(is_promoted ~ ., data = trn[-1], family = 'binomial')
trn <- train[i, ]
library(readr)
require(dplyr)
#Load datasets
train <- read_csv('train.csv')
test <- read_csv('test.csv')
#Bind dataset into main file
main <- bind_rows(train,test)
View(main)
#Check missing values
colSums(is.na(main))
colSums(is.na(main)/nrow(main)*100)
summary(main$previous_year_rating)
#Lets assign the median value to rating which is na
main$previous_year_rating[is.na(main$previous_year_rating)] <- 3.000
summary(main$previous_year_rating)
#Univariate Analyis
main$education <- NULL
#No of Training
main$no_of_trainings <- as.character(main$no_of_trainings)
#Gender
table(main$gender)
#Age
boxplot(main$age)
plot(quantile(main$age,seq(0,1,0.01)))
quantile(main$age, seq(0,1,0.01))
main$age[main$age>85] <- 85
View(main)
#Model Building
require(dummies)
main <- dummy.data.frame(main)
#Split back into available data and test data
test <- main[1:5973, ]
train <- main[5973:78299, ]
require(caTools)
set.seed(999)
i<- sample.split(main$is_promoted, SplitRatio = 0.75)
trn <- train[i, ]
val <- train[!i, ]
# Building 1st default model with all predictors
log_1 <- glm(is_promoted ~ ., data = trn[-1], family = 'binomial')
summary(log_1)
main <- dummy.data.frame(main)
# Building 1st default model with all predictors
log_1 <- glm(is_promoted ~ ., data = trn[-1], family = 'binomial')
# Building 1st default model with all predictors
log_1 <- glm(is_promoted ~ ., data = trn[-1], family = 'binomial')
summary(log_1)
library(readr)
require(dplyr)
#Load datasets
train <- read_csv('train.csv')
test <- read_csv('test.csv')
#Bind dataset into main file
main <- bind_rows(train,test)
#Check missing values
colSums(is.na(main))
colSums(is.na(main)/nrow(main)*100)
summary(main$previous_year_rating)
#Lets assign the median value to rating which is na
main$previous_year_rating[is.na(main$previous_year_rating)] <- 3.000
summary(main$previous_year_rating)
#Univariate Analyis
main$education <- NULL
#No of Training
main$no_of_trainings <- as.character(main$no_of_trainings)
#Gender
table(main$gender)
#Age
boxplot(main$age)
plot(quantile(main$age,seq(0,1,0.01)))
quantile(main$age, seq(0,1,0.01))
main$age[main$age>85] <- 85
View(main)
#Model Building
require(dummies)
main <- dummy.data.frame(main)
#Split back into available data and test data
test <- main[1:5973, ]
train <- main[5973:78299, ]
set.seed(999)
i<- sample.split(main$is_promoted, SplitRatio = 0.75)
trn <- train[i, ]
val <- train[!i, ]
# Building 1st default model with all predictors
log_1 <- glm(is_promoted ~ ., data = trn[-1], family = 'binomial')
summary(log_1)
# Building 1st default model with all predictors
log_1 <- glm(is_promoted ~ ., data = trn, family = 'binomial')
summary(log_1)
log_2 <- step(log_1)
summary(log_2)
# Step reduction--- #Remove insignicant variables
log_2 <- step(log_1)
summary(log_2)
summary(log_2)
# Step reduction--- #Remove insignicant variables
log_2 <- step(log_1)
summary(log_2)
vif(log_2)
require(car)
vif(log_2)
main <- dummy.data.frame(main)
View(main)
#Split back into available data and test data
test <- main[1:5973, ]
train <- main[5973:78299, ]
require(caTools)
set.seed(999)
i<- sample.split(main$is_promoted, SplitRatio = 0.75)
trn <- train[i, ]
val <- train[!i, ]
# Building 1st default model with all predictors
log_1 <- glm(is_promoted ~ ., data = trn, family = 'binomial')
summary(log_1)
summary(log_1)
# Step reduction--- #Remove insignicant variables
log_2 <- step(log_1)
val$is_promoted <-  predict(log_2, newdata = val, type = 'response')
View(trn)
# Building 1st default model with all predictors
log_1 <- glm(is_promoted ~ ., data = trn, family = 'binomial')
heart <- read.csv('heart.csv')
library(readr)
require(dplyr)
#Load datasets
train <- read_csv('train.csv')
test <- read_csv('test.csv')
library(readr)
require(dplyr)
#Load datasets
train <- read_csv('train.csv')
test <- read_csv('test.csv')
library(readr)
require(dplyr)
#Load datasets
train <- read_csv('train.csv')
test <- read_csv('test.csv')
#Bind dataset into main file
main <- bind_rows(train,test)
View(main)
#Clear everything previously in environment
rm(list=is())llibrary(readr)
#Clear everything previously in environment
rm(list=is())
dev.off()
#Get a feel of the data at hand
head(train)
head(test)
#Bind dataset into main file
main <- bind_rows(train,test)
str(main)
####Data Cleaning#####
#Avoid case mismatch possibility
main <- mutate_if(main, is.character, tolower)
#Check missing values
colSums(is.na(main))
colSums(is.na(main)/nrow(main)*100)
#Blank in Education
summary(as.factor(main$education))
require(ggplot2)
ggplot(train,aes(x=education, fill=as.factor(is.promoted)))+ geom_bar(position='fill')
ggplot(train,aes(x=education, fill=as.factor(is_promoted)))+ geom_bar(position='fill')
#Lets keep it simple for now
main$education[which(is.na(main$education))] <- Uneducated
#Lets keep it simple for now
main$education[which(is.na(main$education))] <- 'Uneducated'
table(main$education)
#NA's in previous year rating
summary(main$previous_year_rating)
summary(as.facor(main$previous_year_rating))
require(dplyr)
#Blank in Education
summary(as.factor(main$education))
#NA's in previous year rating
summary(main$previous_year_rating)
summary(as.facor(main$previous_year_rating))
summary(as.factor(main$previous_year_rating))
#Check where previous rating is NA
df <- main[which(is.na(main$previous_year_rating)), ]
View(df)
table(df$length_of_service)
View(df)
ggplot(train, aes(x=as.factor(previous_year_rating), fill=as.factor(is_promoted)))+geom_bar(position ='fill') )
ggplot(train, aes(x=as.factor(previous_year_rating), fill=as.factor(is_promoted)))+geom_bar(position ='fill')
#And it is significant!
summarise(main$previous_year_rating)
#And it is significant!
summary(main$previous_year_rating)
main$previous_year_rating[which(is.na(main$previous_year_rating))] <- 4
ggplot(main, aes(x=previous_year_rating), fill=as.factor(is_promoted))
ggplot(main, aes(x=previous_year_rating), fill=as.factor(is_promoted))+geom_bar(position = 'fill')
ggplot(main, aes(x=previous_year_rating), fill=as.factor(is_promoted))+geom_bar(position = 'fill')
ggplot(main, aes(x=previous_year_rating), fill=as.factor(is_promoted)))+geom_bar(position = 'fill')
ggplot(main, aes(x=previous_year_rating, fill=as.factor(is_promoted)))+geom_bar(position = 'fill')
ggplot(train, aes(x=previous_year_rating, fill=as.factor(is_promoted)))+geom_bar(position = 'fill')
#Check Duplicates
sum(duplicated(main[-1]))
#147 duplicate rows
(147/nrow(main))*100
#Check no of levels.
sapply(main, n_distinct)
#See structure now
str(main)
#Univariate/Bivariate Analysis---
#1 Employer id
n_distinct((main$employee_id)==nrow(main)
main$employee_id <- as.character(main$employee_id)
main$employee_id <- as.character(main$employee_id)
#Univariate/Bivariate Analysis---
#1 Employer id
n_distinct((main$employee_id)==nrow(main)
main$employee_id <- as.character(main$employee_id)
#Univariate/Bivariate Analysis---
#1 Employer id
n_distinct(main$employee_id)==nrow(main)
main$employee_id <- as.character(main$employee_id)
#2 Department
dept_df <- group_by(main, department)%>%summarise(dept_influence=round(sum(is.promoted,na.rm=T)/n()*100,2))%>%
summary(main$previous_year_rating)
dept_df <- group_by(main, department)%>%summarise(dept_influence=round(sum(is.promoted,na.rm=T)/n()*100,2))%>%
arrange(dept_influence)
View(dept_df)
#2 Department
dept_df <- group_by(master, department) %>%
summarise(dept_influence = round(sum(is_promoted, na.rm = T)/n()*100, 2)) %>%
arrange(dept_influence)
#2 Department
dept_df <- group_by(main, department) %>%
summarise(dept_influence = round(sum(is_promoted, na.rm = T)/n()*100, 2)) %>%
arrange(dept_influence)
install.packages("dplyr")
#2 Department
dept_df <- group_by(main, department) %>%
summarise(dept_influence = round(sum(is_promoted, na.rm = T)/n()*100, 2)) %>%
arrange(dept_influence)
require(dplyr)
#2 Department
dept_df <- group_by(main, department) %>%
summarise(dept_influence = round(sum(is_promoted, na.rm = T)/n()*100, 2)) %>%
arrange(dept_influence)
ggplot(master, aes(x = region)) +
geom_bar(fill = 'skyblue',color = 'black') + coord_flip()
ggplot(main, aes(x = region)) +
geom_bar(fill = 'skyblue',color = 'black') + coord_flip()
reg_df <- group_by(master, region) %>%
summarise(region_precentage = round(n()/nrow(master)*100,2))
reg_df <- group_by(main, region) %>%
summarise(region_precentage = round(n()/nrow(master)*100,2))
reg_df <- group_by(main, region) %>%
summarise(region_precentage = round(n()/nrow(master)*100,2))
reg_df <- group_by(main, region) %>%
summarise(region_precentage = round(n()/nrow(master)*100,2))
# It is way too many categories. Better to drop.
master$region <- NULL
# It is way too many categories. Better to drop.
main$region <- NULL
edu_df <- group_by(master, education) %>%
summarise(edu_influence = round(sum(is_promoted, na.rm = T)/n()*100,2)) %>%
arrange(desc(edu_influence))
edu_df <- group_by(main, education) %>%
summarise(edu_influence = round(sum(is_promoted, na.rm = T)/n()*100,2)) %>%
arrange(desc(edu_influence))
ggplot(master[!is.na(master$is_promoted),],
aes(x = gender, fill =  as.factor(is_promoted))) +
geom_bar()
ggplot(main[!is.na(master$is_promoted),],
aes(x = gender, fill =  as.factor(is_promoted))) +
geom_bar()
ggplot(main[!is.na(main$is_promoted),],
aes(x = gender, fill =  as.factor(is_promoted))) +
geom_bar()
